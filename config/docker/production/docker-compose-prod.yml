version: '2' 

services:
  app:
    restart: always
    build: 
      context: ../../../
      dockerfile: Dockerfile
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - 5000:5000
    depends_on:
      - redis
      - postgres
    entrypoint: ["python", "flask_app.py"]
  
  celery:
    restart: always
    build: ../../../
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - REDIS_HOST=redis
      - CRON_MIN=${CRON_MIN}
      - CRON_HOUR=${CRON_MIN}
      - CRON_DAY=${CRON_DAY}
    command: celery -A app.tasks worker -B -l info
    depends_on:
      - app
      - redis
      - postgres

  postgres:
    restart: always
    image: postgres:9.6
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"

  redis:
    image: redis
    command: redis-server
    ports:
      - "6379:6379"

  client:
    build:
      context: ../../../
      dockerfile: Dockerfile-node
    volumes:
      - ../../../:/home/ubuntu/celery-scheduler/
      - /home/ubuntu/celery-scheduler/node_modules
    ports:
      - 3007:3000
    environment:
      - RACES_SERVICE_URL=${RACES_SERVICE_URL}
      - RESULTS_SERVICE_URL=${RESULTS_SERVICE_URL}
      - QUAL_SERVICE_URL=${QUAL_SERVICE_URL}
      - LAPTIMES_SERVICE_URL=${LAPTIMES_SERVICE_URL}
      - PITSTOPS_SERVICE_URL=${PITSTOPS_SERVICE_URL}
    command: npm run build
    depends_on:
      - app
